import efm;

struct Efm.File.Stat{
    size : long;
    uid : int;
    gid : int;
    mtime : long;
    ctime : long;
    atime : long;
}

abstract Efm.File(Eo.Base) {
    [[A class to abstract files in storage.
      A object can be crated with the generate function.
    ]]
    methods {
        @property filename {
            [[Get the filename of this object, xxx/xxx/xxx/{name.extension} the part between { and } will be returned. ]]
            get {
                [[get the filename of this object]]
            }
            values {
                filename : const(char)*;
            }
        }
        @property path {
            [[Get the complete path of this object]]
            get {
                [[Return the path of this object]]
            }
            values {
                path : const(char)*;
            }
        }
        @property fileending {
            [[The fileending of the file behind this object, xxx/xxxx/xyz.{ext} the part between { and } will be returned]]
            get {
                [[returns the Fileending]]
            }
            values {
                path : const(char)*;
            }
        }
        @property mimetype {
            [[The mimetype of the given file, this attribute is fetched async]]
            get {
                [[Returns the mimetype or NULL if it cannot be fetched or is not _yet_ fetched.]]
            }
            values {
                mimetype : const(char)*;
            }
        }
        @property stat {
            [[Get the stat of this file]]
            get {
                [[returns the pointer to a struct which carrys the stat]]
            }
            values {
                stat : Efm.File.Stat*;
            }
        }
        is_type {
            [[Helperfunktion to check which type this file is]]
            params {
                type: Efm.File.Type; [[The type to check for]]
            }
            return : bool; [[True if the file is of this type or false if not.]]
        }
        @property is_invalid {
            [[returns true if this handle is invalid]]
            get {

            }
            values {
                invalid : bool;
            }
        }
        monitor {
            [[This will start a monitor, which will monitor new files, from this point on]]
            params {
                filter : void*; [[Trollololol give me a filter]]
            }
            return : void*; [[Trololol its a Monitor!]]
        }
    }
    events {
        fsquery,done; [[Query the fs operations is done.]]
        changed; [[The stats of the file have changed]]
        invalid; [[This object is not valid anymore]]
    }
    implements {
        Eo.Base.constructor;
        @empty Efm.File.is_type;
        @empty Efm.File.stat.get;
        @empty Efm.File.fileending.get;
        @empty Efm.File.mimetype.get;
        @empty Efm.File.path.get;
        @empty Efm.File.filename.get;
        @empty Efm.File.monitor;
    }
}