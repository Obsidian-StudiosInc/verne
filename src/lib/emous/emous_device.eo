enum Device_State{
   mounted,
   umounted,
   mountreq,
   umountreq
}

class Emous.Device (Eo.Base)
{
   methods {
      @property state {
         values {
            mounted : Device_State;
         }
         set {
            /*@
            Set the state of this device.
            Setting a state here will not call or effect anything expecting calling the changed event.

            If you want to mount or umount the device you have to call the mount/umount functions.
            */
         }
         get {
            /*@
            True if this device is mounted, false if not.
            */
         }
      }
      @property displayname {
         values {
            name : const(char)*;
         }
         get{

         }
      }
      @property mountpoints {
         values {
            mountpoints : list<Eina_Stringshare*>*;
         }
         get {
            /*@
            Get all a  list where this is device is mounted.
            */
         }
      }
      mountpoint_add {
         params {
            mnt_point : const(char)*;
         }
      }
      moutpoint_del {
         params {
            mnt_point : const(char)*;
         }
      }
      mount {
         /*@
         send a mount request, the backend which requested this device should handle that.
         */
      }
      umount {
         /*@
         Send a umount request, the backend which requested this device should handle this
         */
      }
      populate {
         /*@
         This call will notify the ecosystem about the new device
         */
      }
      construct {
         params {
            displayname : const(char)*;
         }
      }
   }
   constructors {
      .construct;
   }
   events {
      state,changed; /* the device state has changed */
      mount,request; /*@
called if someone called mount, do not listen to this unless you are the backend which requested this device
*/
      umount,request; /*@
someone requested a umount!
@see the mount,request event
*/

   }
   implements {
      Eo.Base.destructor;
   }
}
