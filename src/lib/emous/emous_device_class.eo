struct Emous_Mountpoint {
   source: const(char)*;
   mountpoint: const(char)*;
}

class Emous_Device_Class (Eo.Base)
{
   methods {
      @property name {
         values {
            const(char) *name;
         }
         get {

         }
      }
      device_add {
         params {
            const(char) *name;
         }
         return: Emous_Device*;
      }
      keyword_add {
         params {
            const(char) *type;
         }
      }
      keyword_test {
         params {
            const(char) *type;
         }
         return: Eina_Bool;
      }
      construct {
         params {
            const(char) *name;
         }
      }
      mountpoint_added {
         params {
            const(char) *mountpoint;
            const(char) *source;
         }
      }
      mountpoint_removed {
         params {
            const(char) *mountpoint;
         }
      }
   }
   constructors {
      .construct;
   }
   events {
      device,add; /* device added */
      device,del; /* device deleted */
      mountpoint,check,add; /*@
Should check if this mountpoint could belong to any device the class has added.
This signal is a result on calling the mount_point_check function. it is just called on a class where the name of the class is the same than the type of the mountpoint.
*/
      mountpoint,check,del; /*@ The subsystem is notifing that a mountpoint disappeared.
      */
   }
   implements {
      Eo.Base.destructor;
   }
}
